<!DOCTYPE html>
<html>
    <head>
        <title><%= mii.meta.name %> - InfiniMii</title>
        <meta content="<%= mii.meta.name %>" property="og:title" />
        <meta content="<%= mii.desc %>" property="og:description" />
        <meta content="https://miis.kestron.com/mii?id=<%= mii.id %>" property="og:url" />
        <meta content="https://miis.kestron.com/miiImgs/<%= mii.id %>.jpg" property="og:image" />
        <meta content="#ff0000" data-react-helmet="true" name="theme-color" />
        <link rel="stylesheet" href="global.css">
        <link rel="stylesheet" href="miiPage.css">
    </head>
    <body>
        <% 
            const imgPath = isPrivate ? 'privateMiiImgs' : 'miiImgs';
            const qrPath = isPrivate ? 'privateMiiQRs' : 'miiQRs';
        %>
        <%- partials.header %>
        <%- partials.accountDisplay %>
        <div class="content">
            <%- partials.sidebar %>

            <div class="mii-id-card">
                <!-- Card Header -->
                <div class="id-card-header">
                    <h2>Mii ID Card</h2>
                    <div class="card-number" onclick="copyId()">ID: <%= mii.id %></div>
                </div>

                <!-- Main Card Body -->
                <div class="id-card-body">
                    <!-- Left side: Mii Image -->
                    <div class="id-card-photo">
                        <img src="/<%= imgPath %>/<%= mii.id %>.jpg" 
                            onerror="this.src='/<%= imgPath %>/<%= mii.id %>.png'"
                            alt="<%= mii.meta?.name || mii.name %>">
                        <div class="qr-code">
                            <a href="/<%= qrPath %>/<%= mii.id %>.jpg" target="_blank">
                                <img src="/<%= qrPath %>/<%= mii.id %>.jpg" 
                                    onerror="this.src='/<%= qrPath %>/<%= mii.id %>.png'"
                                    alt="QR Code">
                            </a>
                            <a href="/<%= qrPath %>/<%= mii.id %>.jpg" target="_blank">
                                <span>Download for 3DS</span>
                            </a>
                        </div>
                    </div>

                    <!-- Right side: Information -->
                    <div class="id-card-info">
                        <h1 class="mii-name"><%= mii.meta.name %></h1>
                        
                        <div class="info-grid">
                            <% if(mii.meta.creatorName?.length>0){ %>
                            <div class="info-item">
                                <span class="info-label">Creator Name</span>
                                <span class="info-value"><%= mii.meta.creatorName %></span>
                            </div>
                            <% } %>
                            
                            <div class="info-item">
                                <span class="info-label">Birthday</span>
                                <span class="info-value"><%= ["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][mii.general.birthMonth] %> <%= mii.general.birthday>0?mii.general.birthday:"Not Set" %></span>
                            </div>

                            <% if(mii.general.height !== undefined) { %>
                            <div class="info-item">
                                <span class="info-label">Height</span>
                                <span class="info-value"><%= `${height.feet}' ${height.inches}"` %></span>
                            </div>
                            <% } %>

                            <% if(mii.general.weight !== undefined) { %>
                            <div class="info-item">
                                <span class="info-label">Weight [Experimental]</span>
                                <span class="info-value"><%= Math.round(weight.pounds) %>lbs</span>
                            </div>
                            <% } %>

                            <% if(mii.general.favoriteColor !== undefined) { %>
                            <div class="info-item">
                                <span class="info-label">Favorite Color</span>
                                <span class="info-value"><%= ["Red", "Orange", "Yellow", "Lime", "Green", "Blue", "Cyan", "Pink", "Purple", "Brown", "White", "Black"][mii.general.favoriteColor] %></span>
                            </div>
                            <% } %>
                            <% if(mii.official && users[thisUser] && (users[thisUser].roles.includes('researcher') || 
                                           users[thisUser].roles.includes('moderator') ||
                                           users[thisUser].roles.includes('administrator'))) { %>
                                <script>
                                const currentCategories = '<%- JSON.stringify(mii.officialCategories || []) %>';
                                let officialCategories = [];
                                let selectedPaths = new Set(currentCategories);
                                let expandedNodes = new Set();

                                async function loadCategoriesForEditor() {
                                    try {
                                        const response = await fetch('/getOfficialCategories');
                                        const data = await response.json();
                                        
                                        if (data.okay) {
                                            officialCategories = data.categories;
                                            // Auto-expand paths that contain selected categories
                                            currentCategories.forEach(path => {
                                                const parts = path.split('/');
                                                let currentPath = '';
                                                parts.forEach((part, index) => {
                                                    currentPath += (index > 0 ? '/' : '') + part;
                                                    if (index < parts.length - 1) {
                                                        expandedNodes.add(currentPath);
                                                    }
                                                });
                                            });
                                            return true;
                                        }
                                        return false;
                                    } catch (error) {
                                        console.error('Error loading categories:', error);
                                        return false;
                                    }
                                }

                                async function openCategoryEditor() {
                                    const loaded = await loadCategoriesForEditor();
                                    
                                    if (!loaded) {
                                        alert('Error loading categories');
                                        return;
                                    }
                                    
                                    const modal = document.createElement('div');
                                    modal.style.cssText = `
                                        position: fixed;
                                        top: 0;
                                        left: 0;
                                        width: 100%;
                                        height: 100%;
                                        background: rgba(0,0,0,0.5);
                                        display: flex;
                                        justify-content: center;
                                        align-items: center;
                                        z-index: 10000;
                                    `;
                                    
                                    const modalContent = document.createElement('div');
                                    modalContent.style.cssText = `
                                        background: white;
                                        padding: 30px;
                                        border-radius: 12px;
                                        max-width: 800px;
                                        width: 90%;
                                        max-height: 90vh;
                                        display: flex;
                                        flex-direction: column;
                                    `;
                                    
                                    modalContent.innerHTML = `
                                        <h3 style="margin-top: 0;">Select Categories</h3>
                                        <p style="color: #666; margin-bottom: 20px;">Check all categories that apply. Only leaf categories (without children) can be selected.</p>
                                        <div style="flex: 1; overflow-y: auto; border: 1px solid #ddd; border-radius: 8px; padding: 15px; background: #f9f9f9;">
                                            <div id="modalCategoryTree"></div>
                                        </div>
                                        <div style="margin-top: 20px; display: flex; gap: 10px; justify-content: flex-end;">
                                            <button onclick="closeCategoryModal()" 
                                                    style="padding: 10px 20px; border: 2px solid #ddd; background: white; border-radius: 6px; cursor: pointer; font-weight: bold;">
                                                Cancel
                                            </button>
                                            <button onclick="saveCategoriesFromModal()" 
                                                    style="padding: 10px 20px; border: none; background: #4CAF50; color: white; border-radius: 6px; cursor: pointer; font-weight: bold;">
                                                Save Categories
                                            </button>
                                        </div>
                                    `;
                                    
                                    modal.appendChild(modalContent);
                                    document.body.appendChild(modal);
                                    modal.id = 'categoryModal';
                                    
                                    renderModalTree();
                                    
                                    modal.addEventListener('click', (e) => {
                                        if (e.target === modal) {
                                            modal.remove();
                                        }
                                    });
                                }

                                function renderModalTree() {
                                    const container = document.getElementById('modalCategoryTree');
                                    if (!container) return;
                                    
                                    container.innerHTML = renderModalNodes(officialCategories);
                                }

                                function renderModalNodes(nodes, level = 0) {
                                    let html = '';
                                    
                                    nodes.forEach(node => {
                                        const hasChildren = node.children && node.children.length > 0;
                                        const isExpanded = expandedNodes.has(node.path);
                                        const isLeaf = !hasChildren;
                                        const isSelected = selectedPaths.has(node.path);
                                        const indent = level * 20;
                                        
                                        html += `
                                            <div style="margin-left: ${indent}px; margin-bottom: 6px;">
                                                <div style="display: flex; align-items: center; padding: 10px; background: white; border-radius: 6px; border-left: 3px solid ${node.color};">
                                                    ${hasChildren ? `
                                                        <span style="cursor: pointer; margin-right: 8px; user-select: none; color: #666;" onclick="toggleModalNode('${node.path}')">
                                                            ${isExpanded ? '▼' : '▶'}
                                                        </span>
                                                    ` : '<span style="width: 18px; display: inline-block; text-align: center; margin-right: 8px; color: #ccc;">•</span>'}
                                                    
                                                    ${isLeaf ? `
                                                        <label style="display: flex; align-items: center; gap: 8px; cursor: pointer; flex: 1;">
                                                            <input type="checkbox" 
                                                                class="category-selector"
                                                                value="${node.path}"
                                                                ${isSelected ? 'checked' : ''}
                                                                onchange="updateModalSelection('${node.path}', this.checked)">
                                                            <span style="color: ${node.color}; font-weight: 500;">${node.name}</span>
                                                            <span style="color: #999; font-size: 0.85em; margin-left: auto;">${node.path}</span>
                                                        </label>
                                                    ` : `
                                                        <span style="color: ${node.color}; font-weight: 600; font-size: 1.05em;">${node.name}</span>
                                                    `}
                                                </div>
                                                
                                                ${hasChildren && isExpanded ? `
                                                    <div style="margin-top: 6px;">
                                                        ${renderModalNodes(node.children, level + 1)}
                                                    </div>
                                                ` : ''}
                                            </div>
                                        `;
                                    });
                                    
                                    return html;
                                }

                                function toggleModalNode(path) {
                                    if (expandedNodes.has(path)) {
                                        expandedNodes.delete(path);
                                    } else {
                                        expandedNodes.add(path);
                                    }
                                    renderModalTree();
                                }

                                function updateModalSelection(path, checked) {
                                    if (checked) {
                                        selectedPaths.add(path);
                                    } else {
                                        selectedPaths.delete(path);
                                    }
                                }

                                function closeCategoryModal() {
                                    document.getElementById('categoryModal')?.remove();
                                }

                                async function saveCategoriesFromModal() {
                                    const categories = Array.from(selectedPaths);
                                    
                                    await updateCategories(categories);
                                    closeCategoryModal();
                                }

                                async function updateCategories(categories) {
                                    try {
                                        const response = await fetch('/updateOfficialCategories', {
                                            method: 'POST',
                                            headers: { 'Content-Type': 'application/json' },
                                            body: JSON.stringify({
                                                miiId: '<%= mii.id %>',
                                                categories: categories
                                            })
                                        });
                                        
                                        const data = await response.json();
                                        
                                        if (data.okay) {
                                            alert('Categories updated successfully!');
                                            window.location.reload();
                                        } else {
                                            alert('Error: ' + (data.error || 'Failed to update categories'));
                                        }
                                    } catch (error) {
                                        console.error('Error:', error);
                                        alert('Error updating categories');
                                    }
                                }
                                </script>

                                <style>
                                    .official-categories-section {
                                        grid-column: 1 / -1;
                                        padding: 15px;
                                        background: #f0f8ff;
                                        border-radius: 8px;
                                        border: 2px solid #bbdefb;
                                    }

                                    .categories-display {
                                        display: flex;
                                        flex-wrap: wrap;
                                        gap: 8px;
                                        margin: 10px 0;
                                    }

                                    .category-badge {
                                        display: inline-block;
                                        background: linear-gradient(135deg, #e3f2fd, #bbdefb);
                                        color: #0066cc;
                                        padding: 6px 12px;
                                        border-radius: 12px;
                                        font-size: 0.9em;
                                        font-weight: 500;
                                        border: 1px solid #90caf9;
                                    }

                                    .no-categories {
                                        color: #999;
                                        font-style: italic;
                                    }

                                    .edit-categories-btn,
                                    .manage-cats-btn {
                                        background: #0066cc;
                                        color: white;
                                        border: none;
                                        padding: 8px 16px;
                                        border-radius: 6px;
                                        cursor: pointer;
                                        font-weight: bold;
                                        margin-top: 10px;
                                        margin-right: 10px;
                                        transition: background 0.3s;
                                        text-decoration: none;
                                        display: inline-block;
                                    }

                                    .edit-categories-btn:hover,
                                    .manage-cats-btn:hover {
                                        background: #0052a3;
                                    }

                                    .manage-cats-btn {
                                        background: #2196F3;
                                    }

                                    .manage-cats-btn:hover {
                                        background: #0b7dda;
                                    }

                                    #categoryModal .category-selector {
                                        cursor: pointer;
                                        width: 18px;
                                        height: 18px;
                                    }
                                    </style>
                                    <% } %>
                        </div>
                    </div>
                    <% if(isPrivate) { %>
                        <div style="background: #fff3cd; border: 2px solid #ffc107; padding: 15px; margin: 15px; border-radius: 8px; text-align: center;">
                            <strong>🔒 This is a Private Mii</strong>
                            <p style="margin: 10px 0;">Only you and moderators can view this Mii.</p>
                            <% if(mii.blockedFromPublishing) { %>
                                <div style="background: #ffe6e6; padding: 10px; margin-top: 10px; border-radius: 6px;">
                                    <strong>🚫 This Mii has been blocked from publishing</strong>
                                    <% if(mii.blockReason) { %>
                                        <p><%= mii.blockReason %></p>
                                    <% } %>
                                </div>
                            <% } else { %>
                                <button onclick="publishThisMii()" style="background: #00cc00; color: white; padding: 10px 20px; border: none; border-radius: 6px; cursor: pointer; font-weight: bold; margin-top: 10px;">
                                    📤 Publish This Mii
                                </button>
                            <% } %>
                        </div>
                        <% if(isPrivate && users[thisUser] && users[thisUser].roles && users[thisUser].roles.includes('moderator')) { %>
                            <div style="background: #fff3cd; border: 2px solid #ff6600; padding: 15px; margin: 15px; border-radius: 8px;">
                                <strong>🛡️ Moderator Actions</strong>
                                <% if(!mii.blockedFromPublishing) { %>
                                    <button onclick="blockFromPublishing()" style="background: #ff6600; color: white; padding: 10px 20px; border: none; border-radius: 6px; cursor: pointer; font-weight: bold; margin-top: 10px;">
                                        🚫 Block from Publishing
                                    </button>
                                <% } else { %>
                                    <p style="margin: 10px 0;">This Mii is already blocked from publishing.</p>
                                <% } %>
                            </div>
                        <% } %>
                    <% } %>
                </div>

                <!-- Uploader Information -->
                <!-- Footer Section -->
                <div class="id-card-footer">
                    <% if(mii.official){ %>
                        <div class="uploader-info">
                            <span class="official-badge">⭐ Official Nintendo Mii</span>
                        </div>
                    <% } else{%>
                    <div class="uploader-info">
                        <span class="label">Uploaded by</span>
                        <a href="/user?user=<%= mii.uploader %>"><%= mii.uploader %></a>
                        <span class="date">on <%= new Date(mii.uploadedOn).toLocaleDateString() %></span>
                    </div>
                    <% } %>
                </div>
                <!-- Description -->
                <% if(mii.desc && mii.desc.length > 0) { %>
                    <div class="id-card-description">
                        <h3>About</h3>
                        <p><%= mii.desc %></p>
                    </div>
                <% } %>

                <!-- Actions -->
                <div class="id-card-actions">
                    <button class="btn-primary" onclick="copyId()">
                        <svg xmlns="http://www.w3.org/2000/svg" height="20" viewBox="0 96 960 960" width="20" fill="currentColor">
                            <path d="M360 816q-33 0-56.5-23.5T280 736V256q0-33 23.5-56.5T360 176h360q33 0 56.5 23.5T800 256v480q0 33-23.5 56.5T720 816H360Zm0-80h360V256H360v480ZM200 976q-33 0-56.5-23.5T120 896V336h80v560h440v80H200Zm160-240V256v480Z"/>
                        </svg>
                        Copy Mii ID
                    </button>

                    <div class="download-dropdown">
                        <button class="btn-primary dropdown-toggle" onclick="toggleDownloadMenu(event)">
                            <svg xmlns="http://www.w3.org/2000/svg" height="20" viewBox="0 96 960 960" width="20" fill="currentColor">
                                <path d="M480 896 280 696l56-56 104 104V416h80v328l104-104 56 56-200 200Zm-240-80q-33 0-56.5-23.5T160 736V616h80v120h480V616h80v120q0 33-23.5 56.5T720 816H240Z"/>
                            </svg>
                            Download Options
                            <svg xmlns="http://www.w3.org/2000/svg" height="16" viewBox="0 96 960 960" width="16" fill="currentColor" style="margin-left: 8px;">
                                <path d="M480 696 280 496l56-56 144 144 144-144 56 56-200 200Z"/>
                            </svg>
                        </button>
                        
                        <div class="download-menu" id="downloadMenu">
                            <a href="/downloadMii?id=<%= mii.id %>&format=qr" download class="download-item">
                                <svg xmlns="http://www.w3.org/2000/svg" height="20" viewBox="0 96 960 960" width="20" fill="currentColor">
                                    <path d="M120 856V296q0-33 23.5-56.5T200 216h160q33 0 56.5 23.5T440 296v560H200q-33 0-56.5-23.5T120 776Zm80-80h160V296H200v480Zm320 80V296q0-33 23.5-56.5T600 216h160q33 0 56.5 23.5T840 296v560H600q-33 0-56.5-23.5T520 776Zm80-80h160V296H600v480ZM200 776h160-160Zm400 0h160-160Z"/>
                                </svg>
                                <div>
                                    <strong>3DS/Wii U QR Code</strong>
                                    <small>Scan with Mii Maker</small>
                                </div>
                            </a>
                            
                            <a href="/downloadMii?id=<%= mii.id %>&format=3dsbin" download class="download-item">
                                <svg xmlns="http://www.w3.org/2000/svg" height="20" viewBox="0 96 960 960" width="20" fill="currentColor">
                                    <path d="M319 806q-72-44-115.5-116.5T160 536q0-134 93-227t227-93q134 0 227 93t93 227q0 81-43.5 153.5T641 806l-56-56q59-38 94-99.5T719 536q0-107-76-183.5T459 276q-108 0-184 76.5T199 536q0 53 20 99.5t58 81.5l-58 89Zm161 90V456h80v440h-80Z"/>
                                </svg>
                                <div>
                                    <strong>3DS Bin (Decrypted)</strong>
                                    <small>For tools & modding</small>
                                </div>
                            </a>
                            
                            <a href="/downloadMii?id=<%= mii.id %>&format=wii" download class="download-item">
                                <img src="/wii.png" width="20" height="20" style="opacity: 0.9;">
                                <div>
                                    <strong>Wii Format (.mii)</strong>
                                    <small>For Wii console</small>
                                </div>
                            </a>
                            
                            <div class="download-divider"></div>
                            
                            <a href="#" onclick="copyStudioCode(event)" class="download-item">
                                <svg xmlns="http://www.w3.org/2000/svg" height="20" viewBox="0 96 960 960" width="20" fill="currentColor">
                                    <path d="M360 816q-33 0-56.5-23.5T280 736V256q0-33 23.5-56.5T360 176h360q33 0 56.5 23.5T800 256v480q0 33-23.5 56.5T720 816H360Zm0-80h360V256H360v480ZM200 976q-33 0-56.5-23.5T120 896V336h80v560h440v80H200Zm160-240V256v480Z"/>
                                </svg>
                                <div>
                                    <strong>Copy Studio Code</strong>
                                    <small id="studioCodeStatus">Click to copy hex code</small>
                                </div>
                            </a>
                            
                            <a href="/downloadMii?id=<%= mii.id %>&format=studio" download class="download-item">
                                <svg xmlns="http://www.w3.org/2000/svg" height="20" viewBox="0 96 960 960" width="20" fill="currentColor">
                                    <path d="M480 896 280 696l56-56 104 104V416h80v328l104-104 56 56-200 200ZM240 416q-33 0-56.5-23.5T160 336V256q0-33 23.5-56.5T240 176h480q33 0 56.5 23.5T800 256v80q0 33-23.5 56.5T720 416h-60v-80h60v-80H240v80h60v80h-60Z"/>
                                </svg>
                                <div>
                                    <strong>Download Studio Code</strong>
                                    <small>Save as text file</small>
                                </div>
                            </a>
                            
                            <div class="download-divider"></div>
                            
                            <a href="#" onclick="showInstructions(event, '3ds')" class="download-item">
                                <svg xmlns="http://www.w3.org/2000/svg" height="20" viewBox="0 96 960 960" width="20" fill="currentColor">
                                    <path d="M320 896q-33 0-56.5-23.5T240 816V336q0-33 23.5-56.5T320 256h480q33 0 56.5 23.5T880 336v480q0 33-23.5 56.5T800 896H320Zm0-80h480V336H320v480Zm-160 80q-33 0-56.5-23.5T80 816V296h80v520h520v80H160Zm160-640v480-480Z"/>
                                </svg>
                                <div>
                                    <strong>Recreation Instructions (3DS/Wii U)</strong>
                                    <small>Step-by-step guide</small>
                                </div>
                            </a>
                            
                            <a href="#" onclick="showInstructions(event, 'wii')" class="download-item">
                                <img src="/wii.png" width="20" height="20" style="opacity: 0.9;">
                                <div>
                                    <strong>Recreation Instructions (Wii)</strong>
                                    <small>Step-by-step guide</small>
                                </div>
                            </a>
                        </div>
                    </div>

                    <!-- Instructions Modal -->
                    <div id="instructionsModal" class="instructions-modal">
                        <div class="instructions-modal-content">
                            <div class="instructions-modal-header">
                                <h2 id="instructionsTitle">Recreation Instructions</h2>
                                <button class="close-modal" onclick="closeInstructionsModal()">&times;</button>
                            </div>
                            <div class="instructions-modal-body">
                                <div class="instructions-options">
                                    <label>
                                        <input type="radio" name="instructionType" value="minimal" checked onchange="updateInstructions()">
                                        Minimal (Only Changed Values)
                                    </label>
                                    <label>
                                        <input type="radio" name="instructionType" value="full" onchange="updateInstructions()">
                                        Complete (All Steps)
                                    </label>
                                </div>
                                <div id="instructionsContent" class="instructions-list">
                                    <p style="text-align: center; color: var(--text-2);">Loading instructions...</p>
                                </div>
                            </div>
                            <div class="instructions-modal-footer">
                                <button class="btn-secondary" onclick="copyInstructions()">Copy to Clipboard</button>
                                <button class="btn-primary" onclick="closeInstructionsModal()">Close</button>
                            </div>
                        </div>
                    </div>


                    <div class="vote-section">
                        <span onclick="likeMii(this,'<%= mii.id %>','<%= highlightedMii %>','<%= users[thisUser].roles.includes(`moderator`) %>')">
                            <% if(!users[thisUser].votedFor.includes(mii.id)&&!users[thisUser].submissions.includes(mii.id)){ %>
                                <svg xmlns="http://www.w3.org/2000/svg" class="like-icon" viewBox="0 96 960 960" fill="currentColor">
                                    <path d="m480 935-41-37q-105.768-97.121-174.884-167.561Q195 660 154 604.5T96.5 504Q80 459 80 413q0-90.155 60.5-150.577Q201 202 290 202q57 0 105.5 27t84.5 78q42-54 89-79.5T670 202q89 0 149.5 60.423Q880 322.845 880 413q0 46-16.5 91T806 604.5Q765 660 695.884 730.439 626.768 800.879 521 898l-41 37Zm0-79q101.236-92.995 166.618-159.498Q712 630 750.5 580t54-89.135q15.5-39.136 15.5-77.72Q820 347 778 304.5T670.225 262q-51.524 0-95.375 31.5Q531 325 504 382h-49q-26-56-69.85-88-43.851-32-95.375-32Q224 262 182 304.5t-42 108.816Q140 452 155.5 491.5t54 90Q248 632 314 698t166 158Zm0-297Z"/>
                                </svg>
                            <% } else { %>
                                <svg class="like-icon liked" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M0 0h24v24H0V0z" fill="none"/>
                                    <path d="M13.35 20.13c-.76.69-1.93.69-2.69-.01l-.11-.1C5.3 15.27 1.87 12.16 2 8.28c.06-1.7.93-3.33 2.34-4.29 2.64-1.8 5.9-.96 7.66 1.1 1.76-2.06 5.02-2.91 7.66-1.1 1.41.96 2.28 2.59 2.34 4.29.14 3.88-3.3 6.99-8.55 11.76l-.1.09z"/>
                                </svg>
                            <% } %>
                            <span class="vote-count"><%= mii.votes %></span>
                        </span>

                        <% if(users[thisUser].roles.includes('moderator')||users[thisUser].submissions.includes(mii.id)){ %>
                            <svg xmlns="http://www.w3.org/2000/svg" class="trash-icon" viewBox="0 96 960 960" fill="currentColor" onclick="deleteMii('<%= mii.id %>')">
                                <path d="M261 936q-24.75 0-42.375-17.625T201 876V306h-41v-60h188v-30h264v30h188v60h-41v570q0 24-18 42t-42 18H261Zm438-630H261v570h438V306ZM367 790h60V391h-60v399Zm166 0h60V391h-60v399ZM261 306v570-570Z"/>
                            </svg>
                        <% } else { %>
                            <svg xmlns="http://www.w3.org/2000/svg" class="report-icon" viewBox="0 -960 960 960" fill="currentColor" onclick="report()">
                                <path d="M200-120v-680h360l16 80h224v400H520l-16-80H280v280h-80Zm300-440Zm86 160h134v-240H510l-16-80H280v240h290l16 80Z"/>
                            </svg>
                        <% } %>
                    </div>
                </div>

                <!-- Moderator Tools -->
                <% if(users[thisUser]?.roles.includes('moderator')){ %>
                    <div class="moderator-tools">
                        <div class="mod-tools-header" onclick="toggleModTools()">
                            <h3>🛠️ Moderator Tools</h3>
                            <span class="dropdown-arrow" id="modToolsArrow">▼</span>
                        </div>
                        
                        <div class="mod-tools-content" id="modToolsContent">
                            <div class="mod-tool-grid">
                                <!-- Edit Mii Name -->
                                <div class="mod-tool-item">
                                    <label>Mii Name:</label>
                                    <input type="text" id="editMiiName" value="<%= mii.meta.name %>" placeholder="Mii Name">
                                    <button onclick="updateMiiField('name', document.getElementById('editMiiName').value)">Update Name</button>
                                </div>

                                <!-- Edit Description -->
                                <div class="mod-tool-item">
                                    <label>Description:</label>
                                    <textarea id="editDesc" rows="3" placeholder="Description"><%= mii.desc %></textarea>
                                    <button onclick="updateMiiField('desc', document.getElementById('editDesc').value)">Update Description</button>
                                </div>

                                <!-- Edit Creator Name -->
                                <div class="mod-tool-item">
                                    <label>Creator Name (in Mii file):</label>
                                    <input type="text" id="editCreatorName" value="<%= mii.meta.creatorName || '' %>" placeholder="Creator Name">
                                    <button onclick="updateMiiField('creatorName', document.getElementById('editCreatorName').value)">Update Creator</button>
                                </div>

                                <!-- Switch Uploader -->
                                <div class="mod-tool-item">
                                    <label>Change Uploader:</label>
                                    <input type="text" id="editUploader" value="<%= mii.uploader %>" placeholder="Username">
                                    <button onclick="updateMiiField('uploader', document.getElementById('editUploader').value)">Change Uploader</button>
                                </div>

                                <!-- Toggle Official Status -->
                                <div class="mod-tool-item">
                                    <label>Official Mii Status:</label>
                                    <div class="toggle-container">
                                        <input type="checkbox" id="officialCheckbox" <%= mii.official ? 'checked' : '' %>>
                                        <label for="officialCheckbox">
                                            <% if(mii.official) { %>
                                                ✅ This is an Official Mii
                                            <% } else { %>
                                                ❌ Not an Official Mii
                                            <% } %>
                                        </label>
                                    </div>
                                    <button onclick="toggleOfficial()">Update Official Status</button>
                                </div>

                                <!-- Regenerate QR Code -->
                                <div class="mod-tool-item">
                                    <label>Regenerate QR Code:</label>
                                    <button onclick="regenerateQR()">🔄 Regenerate QR</button>
                                    <span id="qrStatus"></span>
                                </div>

                                <!-- Delete Mii -->
                                <div class="mod-tool-item mod-tool-danger">
                                    <label>Delete Mii:</label>
                                    <button class="danger-btn" onclick="confirmDeleteMii()">🗑️ Delete Mii</button>
                                </div>
                            </div>
                        </div>
                    </div>
                <% } %>
            </div>
            <%- partials.featuredMiis %>
        </div>
        
        <%- partials.footer %>
        
        <script src="global.js"></script>

        <!--Due to needing access to EJS variables, we unfortunately cannot move these contents to a dedicated JS file-->
        <script>
            function copyId(){
                navigator.clipboard.writeText("<%= mii.id %>");
            }
            function report(){
                var what=prompt("What would you like to report this Mii for?");
                fetch("/reportMii?id=<%= mii.id %>&what="+encodeURIComponent(what));
            }
            let currentInstructionsFormat = '3ds';
            let currentInstructionsData = null;

            function toggleDownloadMenu(event) {
                event.stopPropagation();
                const menu = document.getElementById('downloadMenu');
                menu.classList.toggle('active');
            }

            // Close menu when clicking outside
            document.addEventListener('click', function(event) {
                const dropdown = document.querySelector('.download-dropdown');
                if (dropdown && !dropdown.contains(event.target)) {
                    document.getElementById('downloadMenu').classList.remove('active');
                }
            });

            async function copyStudioCode(event) {
                event.preventDefault();
                const statusEl = document.getElementById('studioCodeStatus');
                const originalText = statusEl.textContent;
                
                try {
                    const response = await fetch('/getStudioCode?id=<%= mii.id %>');
                    const result = await response.json();
                    
                    if (result.okay) {
                        await navigator.clipboard.writeText(result.code);
                        statusEl.textContent = '✓ Copied!';
                        statusEl.style.color = 'var(--brand-color)';
                        
                        setTimeout(() => {
                            statusEl.textContent = originalText;
                            statusEl.style.color = '';
                        }, 2000);
                    }
                    else {
                        statusEl.textContent = '✗ Error';
                        statusEl.style.color = '#ff4444';
                    }
                } catch (error) {
                    console.error('Error copying Studio code:', error);
                    statusEl.textContent = '✗ Failed';
                    statusEl.style.color = '#ff4444';
                }
            }

            async function showInstructions(event, format) {
                event.preventDefault();
                currentInstructionsFormat = format;
                
                // Close download menu
                document.getElementById('downloadMenu').classList.remove('active');
                
                // Show modal
                const modal = document.getElementById('instructionsModal');
                modal.classList.add('active');
                
                // Update title
                const titleEl = document.getElementById('instructionsTitle');
                titleEl.textContent = `Recreation Instructions (${format === 'wii' ? 'Wii' : '3DS/Wii U'})`;
                
                // Load instructions
                await updateInstructions();
            }

            async function updateInstructions() {
                const full = document.querySelector('input[name="instructionType"]:checked').value === 'full';
                const contentEl = document.getElementById('instructionsContent');
                
                contentEl.innerHTML = '<p style="text-align: center; color: var(--text-2);">Loading...</p>';
                
                try {
                    const response = await fetch(`/getInstructions?id=<%= mii.id %>&format=${currentInstructionsFormat}&full=${full}`);
                    const result = await response.json();
                    
                    if (result.okay) {
                        currentInstructionsData = result.instructions;
                        displayInstructions(result.instructions);
                    }
                    else {
                        contentEl.innerHTML = `<p style="color: #ff4444;">Error: ${result.error}</p>`;
                    }
                } catch (error) {
                    console.error('Error fetching instructions:', error);
                    contentEl.innerHTML = '<p style="color: #ff4444;">Failed to load instructions</p>';
                }
            }

            function displayInstructions(instructions) {
                const contentEl = document.getElementById('instructionsContent');
                
                if (!instructions || Object.keys(instructions).length === 0) {
                    contentEl.innerHTML = '<p style="text-align: center; color: var(--text-2);">All settings are at default values!</p>';
                    return;
                }
                
                let html = '';
                for (const [key, instruction] of Object.entries(instructions)) {
                    if (instruction) {
                        html += `<div class="instruction-item"><span class="instruction-label">${formatLabel(key)}:</span>${instruction}</div>`;
                    }
                }
                
                contentEl.innerHTML = html || '<p style="text-align: center; color: var(--text-2);">No instructions available</p>';
            }

            function formatLabel(key) {
                // Convert camelCase to Title Case
                return key
                    .replace(/([A-Z])/g, ' $1')
                    .replace(/^./, str => str.toUpperCase())
                    .trim();
            }

            function closeInstructionsModal() {
                const modal = document.getElementById('instructionsModal');
                modal.classList.remove('active');
            }

            async function copyInstructions() {
                if (!currentInstructionsData) return;
                
                let text = `Recreation Instructions for <%= mii.meta.name %> (${currentInstructionsFormat === 'wii' ? 'Wii' : '3DS/Wii U'})\n\n`;
                
                for (const [key, instruction] of Object.entries(currentInstructionsData)) {
                    if (instruction) {
                        text += `${formatLabel(key)}: ${instruction}\n`;
                    }
                }
                
                try {
                    await navigator.clipboard.writeText(text);
                    alert('Instructions copied to clipboard!');
                } catch (error) {
                    console.error('Error copying instructions:', error);
                    alert('Failed to copy instructions');
                }
            }

            // Close modal when clicking outside
            document.getElementById('instructionsModal')?.addEventListener('click', function(event) {
                if (event.target === this) {
                    closeInstructionsModal();
                }
            });
        </script>

        <!--Moderator Tools Functions - Because EJS runs server side, and the client only sees the result of the compilation, this prevents unnecessary JS from loading that doesn't need to be sent-->
        <% if(users[thisUser]?.roles.includes('moderator')){ %>
            <script>
                function toggleModTools() {
                    const content = document.getElementById('modToolsContent');
                    const arrow = document.getElementById('modToolsArrow');
                    
                    content.classList.toggle('expanded');
                    arrow.classList.toggle('rotated');
                }

                async function updateMiiField(field, value) {
                    if (!value || value.trim() === '') {
                        alert('Please enter a valid value');
                        return;
                    }

                    const confirmed = confirm(`Are you sure you want to update the ${field}?`);
                    if (!confirmed) return;

                    try {
                        const response = await fetch('/updateMiiField', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                id: '<%= mii.id %>',
                                field: field,
                                value: value
                            })
                        });

                        const result = await response.json();
                        
                        if (result.okay) {
                            alert(`Successfully updated ${field}!`);
                            location.reload();
                        }
                        else {
                            alert(`Error: ${result.error || 'Unknown error'}`);
                        }
                    }
                    catch (error) {
                        console.error('Error:', error);
                        alert('Failed to update. Please try again.');
                    }
                }

                async function regenerateQR() {
                    const confirmed = confirm('Are you sure you want to regenerate the QR code?');
                    if (!confirmed) return;

                    const statusEl = document.getElementById('qrStatus');
                    statusEl.textContent = 'Regenerating...';
                    statusEl.style.color = '#FFA500';

                    try {
                        const response = await fetch('/regenerateQR?id=<%= mii.id %>');
                        const result = await response.json();
                        
                        if (result.okay) {
                            statusEl.textContent = '✓ Done!';
                            statusEl.style.color = '#4CAF50';
                            setTimeout(() => {
                                location.reload();
                            }, 1000);
                        }
                        else {
                            statusEl.textContent = `✗ Error: ${result.error}`;
                            statusEl.style.color = '#f44336';
                        }
                    }
                    catch (error) {
                        console.error('Error:', error);
                        statusEl.textContent = '✗ Failed';
                        statusEl.style.color = '#f44336';
                    }
                }

                async function confirmDeleteMii() {
                    const miiName = '<%= mii.meta.name %>';
                    const confirmed = confirm(`Are you ABSOLUTELY SURE you want to DELETE the Mii "${miiName}"?\n\nThis action CANNOT be undone!`);
                    
                    if (!confirmed) return;

                    const doubleCheck = prompt(`Type "DELETE" to confirm deletion of ${miiName}:`);
                    if (doubleCheck !== 'DELETE') {
                        alert('Deletion cancelled.');
                        return;
                    }

                    try {
                        const response = await fetch('/deleteMii?id=<%= mii.id %>');
                        const result = await response.json();
                        
                        if (result.okay) {
                            alert('Mii deleted successfully');
                            window.location.href = '/';
                        }
                        else {
                            alert('Error deleting Mii');
                        }
                    }
                    catch (error) {
                        console.error('Error:', error);
                        alert('Failed to delete Mii');
                    }
                }

                async function toggleOfficial() {
                    const isOfficial = document.getElementById('officialCheckbox').checked;
                    
                    const confirmed = confirm(`Are you sure you want to mark this Mii as ${isOfficial ? 'OFFICIAL' : 'NOT OFFICIAL'}?\n\nOfficial Miis are shown with a special badge.`);
                    if (!confirmed) return;

                    try {
                        const response = await fetch('/toggleMiiOfficial', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                id: '<%= mii.id %>',
                                official: isOfficial
                            })
                        });

                        const result = await response.json();
                        
                        if (result.okay) {
                            alert(`Mii official status updated!`);
                            location.reload();
                        }
                        else {
                            alert(`Error: ${result.error || 'Unknown error'}`);
                        }
                    } 
                    catch (error) {
                        console.error('Error:', error);
                        alert('Failed to update official status');
                    }
            }
            </script>
        <% } %>
    </body>
</html>