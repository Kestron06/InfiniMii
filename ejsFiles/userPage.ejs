<!DOCTYPE html>
<html>
    <head>
        <title><%= user.name %> - InfiniMii</title>
        <meta content="<%= user.name %>" property="og:title" />
        <meta content="User <%= user.name %>'s Miis on InfiniMii'" property="og:description" />
        <meta content="https://miis.kestron.com/user/<%= user.name %>" property="og:url" />
        <meta content="https://miis.kestron.com/miiImgs/<%= user.miiPfp %>.jpg" property="og:image" />
        <meta content="#ff0000" data-react-helmet="true" name="theme-color" />
        <link rel="stylesheet" href="global.css">
        <link rel="stylesheet" href="profile.css">
    </head>
    <body>
        <%- partials.header %>
        <%- partials.accountDisplay %>
        <div class="content">
            <%- partials.sidebar %>
            <div class="profile-container">
                <!-- Profile Header -->
                <div class="profile-header">
                    <img src="/miiImgs/<%= user.miiPfp %>.jpg" alt="<%= user.name %>" class="profile-avatar">
                    <div class="profile-info">
                        <div class="profile-name">
                            <h1><%= user.name %></h1>
                            <% const ROLE_DISPLAY={ 
                                'tempBanned': 'üö´ Temp Banned',
                                'permBanned': '‚õî Perm Banned',
                                'basic': '' ,
                                'supporter': 'üíñ Supporter',
                                'researcher': 'üî¨ Researcher',
                                'moderator': 'üõ°Ô∏è Moderator',
                                'administrator': 'üëë Administrator'
                            };
                            const roleClass={
                                'tempBanned': 'banned-badge',
                                'permBanned': 'banned-badge',
                                'supporter': 'supporter-badge',
                                'researcher': 'researcher-badge',
                                'moderator': 'mod-badge',
                                'administrator': 'admin-badge'
                            };
                            userRoles=user.roles || (user.role ? [user.role] : (user.roles.includes('moderator') ? ['moderator'] : [])); %>
                            <% userRoles.forEach(role=> { %>
                                <% if(ROLE_DISPLAY[role]) { %>
                                    <span class="<%= roleClass[role] || 'mod-badge' %>">
                                        <%= ROLE_DISPLAY[role] %>
                                    </span>
                                <% } %>
                            <% }); %>
                        </div>

                        <div class="profile-stats">
                            <div class="stat-item">
                                <span class="stat-label">Miis Uploaded</span>
                                <span class="stat-value">
                                    <%= displayedMiis.length %>
                                </span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">Total Likes</span>
                                <span class="stat-value">
                                    <%= displayedMiis.reduce((sum, mii)=> sum + (mii.votes || 0), 0) %>
                                </span>
                            </div>
                            <% if(user.joinedOn) { %>
                                <div class="stat-item">
                                    <span class="stat-label">Member Since</span>
                                    <span class="stat-value">
                                        <%= new Date(user.joinedOn).toLocaleDateString('en-US', {
                                            year: 'numeric' , month: 'short' }) %>
                                    </span>
                                </div>
                            <% } %>
                        </div>
                    </div>
                </div>

                <!-- Moderator Tools for Profiles -->
                <% const currentUserRoles=users[thisUser] ? (users[thisUser].roles || (users[thisUser].role ?
                    [users[thisUser].role] : (users[thisUser].roles.includes('moderator') ? ['moderator'] :
                    []))) : []; const canModerateProfile=(currentUserRoles.includes('moderator') ||
                    currentUserRoles.includes('administrator')) && thisUser!==user.name; %>
                <% if(canModerateProfile) { %>
                    <div class="moderator-tools">
                        <div class="mod-tools-header" onclick="toggleModTools()">
                            <h3>üõ†Ô∏è Moderator Tools</h3>
                            <span class="dropdown-arrow" id="modToolsArrow">‚ñº</span>
                        </div>

                        <div class="mod-tools-content" id="modToolsContent">
                            <div class="mod-tool-grid">
                                <!-- Change Role (Admin Only) -->
                                <% if(currentUserRoles.includes('administrator')) { %>
                                    <div class="mod-tool-item mod-tool-roles">
                                        <label>User Roles (check multiple):</label>
                                        <div class="role-checkboxes">
                                            <% const userRoles=user.roles || (user.role ? [user.role] :
                                                ['basic']); %>
                                                <label class="role-checkbox">
                                                    <input type="checkbox" value="supporter" <%= userRoles.includes('supporter') ? 'checked' : '' %>>
                                                    üíñ Supporter
                                                </label>
                                                <label class="role-checkbox">
                                                    <input type="checkbox" value="researcher" <%= userRoles.includes('researcher') ? 'checked' : '' %>>
                                                    üî¨ Researcher
                                                </label>
                                                <label class="role-checkbox">
                                                    <input type="checkbox" value="moderator" <%=userRoles.includes('moderator') ? 'checked' : '' %>>
                                                    üõ°Ô∏è Moderator
                                                </label>
                                                <label class="role-checkbox">
                                                    <input type="checkbox" value="administrator" <%=userRoles.includes('administrator') ? 'checked' : '' %>>
                                                    üëë Administrator
                                                </label>
                                        </div>
                                        <button onclick="updateUserRoles()">Update Roles</button>
                                    </div>
                                <% } %>

                                <!-- Temporary Ban -->
                                <div class="mod-tool-item">
                                    <label>Temporary Ban:</label>
                                    <input type="number" id="banHours" placeholder="Hours" min="24">
                                    <input type="text" id="tempBanReason" placeholder="Reason">
                                    <button onclick="tempBanUser()">‚è∞ Temp Ban</button>
                                </div>

                                <!-- Permanent Ban (Admin Only) -->
                                <% if(users[thisUser].role==='administrator' ) { %>
                                    <div class="mod-tool-item mod-tool-danger">
                                        <label>Permanent Ban (deletes account & all Miis):</label>
                                        <input type="text" id="permBanReason" placeholder="Reason">
                                        <button class="danger-btn" onclick="permBanUser()">‚õî
                                            Permanent Ban</button>
                                    </div>
                                <% } %>

                                <!-- Delete All Miis -->
                                <div class="mod-tool-item mod-tool-danger">
                                    <label>Delete All User's Miis:</label>
                                    <button class="danger-btn"
                                        onclick="deleteAllUserMiis()">üóëÔ∏è Delete All Miis (
                                        <%= displayedMiis.length %>)
                                    </button>
                                </div>

                                <!-- Change Username -->
                                <div class="mod-tool-item">
                                    <label>Change Username:</label>
                                    <input type="text" id="newUsername"
                                        value="<%= user.name %>" placeholder="New Username">
                                    <button onclick="changeUsername()">‚úèÔ∏è Change
                                        Username</button>
                                </div>

                                <!-- Change Profile Picture -->
                                <div class="mod-tool-item">
                                    <label>Change Profile Picture (Mii ID):</label>
                                    <input type="text" id="newPfp"
                                        value="<%= user.miiPfp %>" placeholder="Mii ID">
                                    <button onclick="changeUserPfp()">üñºÔ∏è Change
                                        PFP</button>
                                </div>

                            </div>
                        </div>
                    </div>
                <% } %>

                <!-- Profile Content -->
                <div class="profile-content">
                    <h2 class="profile-section-title">
                        <%= user.name %>'s Miis
                    </h2>

                    <% if(displayedMiis.length> 0) { %>
                        <div id="browse-miis">
                            <% for(var i=0; i<displayedMiis.length && i<50; i++){ %>
                                <div class="mii-card" id="<%= displayedMiis[i].id %>">
                                    <a href="<%= '/mii/'+displayedMiis[i].id %>">
                                        <img src="miiImgs/<%= displayedMiis[i].id %>.jpg" alt="<%= displayedMiis[i].meta?.name || displayedMiis[i].name %>">
                                    </a>
                                    <div class="flex">
                                        <div>
                                            <h3>
                                                <%= displayedMiis[i].meta?.name || displayedMiis[i].name %>
                                            </h3>
                                            <a href="<%= '/user/'+encodeURIComponent(displayedMiis[i].uploader) %>"><%= displayedMiis[i].uploader %></a>
                                        </div>
                                    </div>
                                    <p>
                                        <%= displayedMiis[i].desc && displayedMiis[i].desc.length> 75 ? displayedMiis[i].desc.slice(0,73) + "..." : displayedMiis[i].desc %>
                                    </p>
                                </div>
                            <% } %>
                        </div>
                    <% } else { %>
                        <div class="empty-state">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 96 960 960">
                                <path d="M480 976q-33 0-56.5-23.5T400 896q0-33 23.5-56.5T480 816q33 0 56.5 23.5T560 896q0 33-23.5 56.5T480 976Zm0-240q-33 0-56.5-23.5T400 656V256q0-33 23.5-56.5T480 176q33 0 56.5 23.5T560 256v400q0 33-23.5 56.5T480 736Z" />
                            </svg>
                            <h3>No Miis Yet</h3>
                            <p>This user hasn't uploaded any Miis.</p>
                        </div>
                    <% } %>
                </div>
            </div>
            <%- partials.featuredMiis %>
        </div>

        <%- partials.footer %>

        <script src="global.js"></script>

        <% if(users[thisUser] && (users[thisUser].roles.includes('moderator') ||
            users[thisUser].roles.includes('administrator'))) { %>
            <script>
                const targetUsername = '<%= user.name %>';

                function toggleModTools() {
                    const content = document.getElementById('modToolsContent');
                    const arrow = document.getElementById('modToolsArrow');

                    content.classList.toggle('expanded');
                    arrow.classList.toggle('rotated');
                }

                async function updateUserRoles() {
                    const checkboxes = document.querySelectorAll('.role-checkboxes input[type="checkbox"]');
                    const selectedRoles = Array.from(checkboxes)
                        .filter(cb => cb.checked)
                        .map(cb => cb.value);

                    // Always include basic role if no roles selected
                    if (selectedRoles.length === 0) {
                        selectedRoles.push('basic');
                    }

                    const confirmed = confirm(`Update ${targetUsername}'s roles to:\n${selectedRoles.join(', ')}\n\nAre you sure?`);
                    if (!confirmed) return;

                    try {
                        // Remove all current non-basic roles
                        const currentRoles = "<%= JSON.stringify(user.roles || (user.role ? [user.role] : ['basic'])) %>";

                        // Calculate roles to remove
                        const rolesToRemove = currentRoles.filter(r => r !== 'basic' && !selectedRoles.includes(r));

                        // Calculate roles to add
                        const rolesToAdd = selectedRoles.filter(r => !currentRoles.includes(r));

                        // Remove old roles
                        for (const role of rolesToRemove) {
                            const response = await fetch('/removeUserRole', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ username: targetUsername, role })
                            });
                            const result = await response.json();
                            if (!result.okay) {
                                alert(`Error removing role ${role}: ${result.error}`);
                                return;
                            }
                        }

                        // Add new roles
                        for (const role of rolesToAdd) {
                            const response = await fetch('/addUserRole', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ username: targetUsername, role })
                            });
                            const result = await response.json();
                            if (!result.okay) {
                                alert(`Error adding role ${role}: ${result.error}`);
                                return;
                            }
                        }

                        alert('Roles updated successfully!');
                        location.reload();
                    } catch (error) {
                        console.error('Error:', error);
                        alert('Failed to update roles');
                    }
                }

                async function tempBanUser() {
                    const hours = parseInt(document.getElementById('banHours').value);
                    const reason = document.getElementById('tempBanReason').value;

                    if (!hours || hours < 1) {
                        alert('Please enter a valid number of hours');
                        return;
                    }

                    const confirmed = confirm(`Are you sure you want to temporarily ban ${targetUsername} for ${hours} hours?\n\nReason: ${reason || 'No reason provided'}`);
                    if (!confirmed) return;

                    try {
                        const response = await fetch('/tempBanUser', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ username: targetUsername, hours, reason })
                        });

                        const result = await response.json();

                        if (result.okay) {
                            alert(`User temporarily banned for ${hours} hours`);
                            location.reload();
                        }
                        else {
                            alert(`Error: ${result.error}`);
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        alert('Failed to ban user');
                    }
                }

                async function permBanUser() {
                    const reason = document.getElementById('permBanReason').value;

                    const confirmed = confirm(`‚ö†Ô∏è WARNING ‚ö†Ô∏è\n\nAre you ABSOLUTELY SURE you want to PERMANENTLY BAN ${targetUsername}?\n\nThis will:\n- Delete their account\n- Delete ALL their Miis (${'<%= displayedMiis.length %>'})\n- Ban their IP address from creating new accounts\n\nThis action CANNOT be undone!\n\nReason: ${reason || 'No reason provided'}`);

                    if (!confirmed) return;

                    const doubleCheck = prompt(`Type "PERMANENT BAN" to confirm:`);
                    if (doubleCheck !== 'PERMANENT BAN') {
                        alert('Permanent ban cancelled.');
                        return;
                    }

                    try {
                        const response = await fetch('/permBanUser', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ username: targetUsername, reason })
                        });

                        const result = await response.json();

                        if (result.okay) {
                            alert('User permanently banned and deleted');
                            window.location.href = '/';
                        }
                        else {
                            alert(`Error: ${result.error}`);
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        alert('Failed to permanently ban user');
                    }
                }

                async function deleteAllUserMiis() {
                    const confirmed = confirm(`Are you sure you want to delete ALL ${'<%= displayedMiis.length %>'} Miis from ${targetUsername}?\n\nThis action CANNOT be undone!`);
                    if (!confirmed) return;

                    const doubleCheck = prompt(`Type "DELETE ALL" to confirm:`);
                    if (doubleCheck !== 'DELETE ALL') {
                        alert('Deletion cancelled.');
                        return;
                    }

                    try {
                        const response = await fetch('/deleteAllUserMiis', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ username: targetUsername })
                        });

                        const result = await response.json();

                        if (result.okay) {
                            alert(`Deleted ${result.deletedCount} Miis`);
                            location.reload();
                        }
                        else {
                            alert(`Error: ${result.error}`);
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        alert('Failed to delete Miis');
                    }
                }

                async function changeUsername() {
                    const newUsername = document.getElementById('newUsername').value;

                    if (!newUsername || newUsername === targetUsername) {
                        alert('Please enter a new username');
                        return;
                    }

                    const confirmed = confirm(`Are you sure you want to change username from "${targetUsername}" to "${newUsername}"?`);
                    if (!confirmed) return;

                    try {
                        const response = await fetch('/changeUsername', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ oldUsername: targetUsername, newUsername })
                        });

                        const result = await response.json();

                        if (result.okay) {
                            alert('Username changed successfully!');
                            window.location.href = `/user/${encodeURIComponent(newUsername)}`;
                        }
                        else {
                            alert(`Error: ${result.error}`);
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        alert('Failed to change username');
                    }
                }

                async function changeUserPfp() {
                    const newPfp = document.getElementById('newPfp').value;

                    if (!newPfp) {
                        alert('Please enter a Mii ID');
                        return;
                    }

                    const confirmed = confirm(`Are you sure you want to change ${targetUsername}'s profile picture to Mii ID: ${newPfp}?`);
                    if (!confirmed) return;

                    try {
                        const response = await fetch('/changeUserPfp', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ username: targetUsername, miiId: newPfp })
                        });

                        const result = await response.json();

                        if (result.okay) {
                            alert('Profile picture changed successfully!');
                            location.reload();
                        }
                        else {
                            alert(`Error: ${result.error}`);
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        alert('Failed to change profile picture');
                    }
                }
            </script>
        <% } %>
    </body>
</html>