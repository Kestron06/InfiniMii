<!DOCTYPE html>
<html>
    <head>
        <title>Manage Official Categories - InfiniMii</title>
        <link rel='stylesheet' href="global.css">
        <link rel="stylesheet" href="utilityPages.css">
        <link rel="stylesheet" href="manageCategories.css">
    </head>
    <body>
        <%- partials.header %>
        <%- partials.accountDisplay %>
        <div class='content'>
            <%- partials.sidebar %>
            
            <div class='category-management'>
                <div class="header">
                    <h1>üóÇÔ∏è Manage Official Categories</h1>
                    <p class="subtitle">Manage nested categories for official Miis</p>
                </div>

                <!-- Add New Root Category -->
                <div class="management-section">
                    <h2>‚ûï Add New Root Category</h2>
                    <div class="form-group">
                        <input type="text" id="newRootName" placeholder="Category name">
                        <input type="color" id="newRootColor" value="#ff6b6b" title="Category Color">
                        <button onclick="addRootCategory()" class="btn-primary">Create Root Category</button>
                    </div>
                </div>

                <!-- Category Tree -->
                <div class="management-section">
                    <h2>üìÇ Category Tree</h2>
                    <div class="tree-controls">
                        <button onclick="expandAll()" class="btn-small">Expand All</button>
                        <button onclick="collapseAll()" class="btn-small">Collapse All</button>
                    </div>
                    <div id="categoryTree">
                        <p class="loading">Loading categories...</p>
                    </div>
                </div>
            </div>
        </div>
        <%- partials.footer %>
        
        <script>
            let categories = [];
            let expandedNodes = new Set();

            async function loadCategories() {
                try {
                    const response = await fetch('/getOfficialCategories');
                    const data = await response.json();
                    
                    if (data.okay) {
                        categories = data.categories;
                        renderTree();
                    } else {
                        document.getElementById('categoryTree').innerHTML = 
                            '<p class="error">Error loading categories</p>';
                    }
                } catch (error) {
                    console.error('Error:', error);
                    document.getElementById('categoryTree').innerHTML = 
                        '<p class="error">Error loading categories</p>';
                }
            }

            function renderTree() {
                const container = document.getElementById('categoryTree');
                
                if (categories.length === 0) {
                    container.innerHTML = '<p class="no-data">No categories yet. Create one above!</p>';
                    return;
                }
                
                container.innerHTML = renderNodes(categories);
            }

            function renderNodes(nodes, level = 0) {
                let html = '<ul class="tree-list">';
                
                nodes.forEach(node => {
                    const hasChildren = node.children && node.children.length > 0;
                    const isExpanded = expandedNodes.has(node.path);
                    const indent = level * 20;
                    
                    html += `
                        <li class="tree-node" style="margin-left: ${indent}px;" data-path="${node.path}">
                            <div class="node-content" style="border-left: 4px solid ${node.color}">
                                ${hasChildren ? `
                                    <span class="toggle-btn" onclick="toggleNode('${node.path}')">
                                        ${isExpanded ? '‚ñº' : '‚ñ∂'}
                                    </span>
                                ` : '<span class="no-toggle">‚Ä¢</span>'}
                                
                                <span class="node-name" style="color: ${node.color}">${node.name}</span>
                                
                                ${hasChildren ? `<span class="child-count">(${node.children.length})</span>` : ''}
                                
                                <div class="node-actions">
                                    <button onclick="addChildCategory('${node.path}')" class="btn-icon" title="Add Child">
                                        ‚ûï
                                    </button>
                                    <button onclick="renameCategory('${node.path}')" class="btn-icon" title="Rename">
                                        ‚úèÔ∏è
                                    </button>
                                    <button onclick="moveCategory('${node.path}')" class="btn-icon" title="Move">
                                        üì¶
                                    </button>
                                    <button onclick="deleteCategory('${node.path}')" class="btn-icon btn-delete-icon" title="Delete">
                                        üóëÔ∏è
                                    </button>
                                </div>
                            </div>
                            
                            ${hasChildren && isExpanded ? `
                                <div class="children-container">
                                    ${renderNodes(node.children, level + 1)}
                                </div>
                            ` : ''}
                        </li>
                    `;
                });
                
                html += '</ul>';
                return html;
            }

            function toggleNode(path) {
                if (expandedNodes.has(path)) {
                    expandedNodes.delete(path);
                } else {
                    expandedNodes.add(path);
                }
                renderTree();
            }

            function expandAll() {
                function addAllPaths(nodes) {
                    nodes.forEach(node => {
                        if (node.children && node.children.length > 0) {
                            expandedNodes.add(node.path);
                            addAllPaths(node.children);
                        }
                    });
                }
                addAllPaths(categories);
                renderTree();
            }

            function collapseAll() {
                expandedNodes.clear();
                renderTree();
            }

            async function addRootCategory() {
                const name = document.getElementById('newRootName').value.trim();
                const color = document.getElementById('newRootColor').value;
                
                if (!name) {
                    alert('Please enter a category name');
                    return;
                }
                
                try {
                    const response = await fetch('/addCategory', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ name, color, parentPath: null })
                    });
                    
                    const data = await response.json();
                    
                    if (data.okay) {
                        alert('Root category created successfully!');
                        document.getElementById('newRootName').value = '';
                        await loadCategories();
                    } else {
                        alert('Error: ' + (data.error || 'Failed to create category'));
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Error creating category');
                }
            }

            async function addChildCategory(parentPath) {
                const name = prompt('Enter name for new child category:');
                
                if (!name || !name.trim()) return;
                
                const color = prompt('Enter color (hex code, e.g., #ff6b6b):', '#999999');
                
                try {
                    const response = await fetch('/addCategory', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ 
                            name: name.trim(), 
                            color: color || '#999999',
                            parentPath 
                        })
                    });
                    
                    const data = await response.json();
                    
                    if (data.okay) {
                        alert('Child category created successfully!');
                        expandedNodes.add(parentPath); // Auto-expand parent
                        await loadCategories();
                    } else {
                        alert('Error: ' + (data.error || 'Failed to create category'));
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Error creating category');
                }
            }

            async function renameCategory(path) {
                const category = findCategoryByPath(path, categories);
                if (!category) return;
                
                const newName = prompt('Enter new name for category:', category.name);
                
                if (!newName || newName.trim() === category.name) return;
                
                const confirmed = confirm(
                    `Rename "${category.name}" to "${newName.trim()}"?\n\n` +
                    `This will update all Miis using this category and any of its descendants.`
                );
                
                if (!confirmed) return;
                
                try {
                    const response = await fetch('/renameCategory', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ path, newName: newName.trim() })
                    });
                    
                    const data = await response.json();
                    
                    if (data.okay) {
                        alert(`Category renamed successfully!\n${data.updatedMiis} Miis were updated.`);
                        await loadCategories();
                    } else {
                        alert('Error: ' + (data.error || 'Failed to rename category'));
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Error renaming category');
                }
            }

            async function moveCategory(categoryPath) {
                const category = findCategoryByPath(categoryPath, categories);
                if (!category) return;
                
                // Build list of possible parents (excluding self and descendants)
                const possibleParents = [];
                function collectPossibleParents(nodes, currentPath = '') {
                    nodes.forEach(node => {
                        // Exclude the category itself and its descendants
                        if (!node.path.startsWith(categoryPath + '/') && node.path !== categoryPath) {
                            possibleParents.push(node);
                            if (node.children && node.children.length > 0) {
                                collectPossibleParents(node.children);
                            }
                        }
                    });
                }
                collectPossibleParents(categories);
                
                // Create selection dialog
                let options = 'Select new parent:\n\n0. [Root Level]\n';
                possibleParents.forEach((parent, index) => {
                    options += `${index + 1}. ${parent.path}\n`;
                });
                
                const selection = prompt(options + '\nEnter number:');
                
                if (selection === null) return;
                
                const selectionNum = parseInt(selection);
                if (isNaN(selectionNum) || selectionNum < 0 || selectionNum > possibleParents.length) {
                    alert('Invalid selection');
                    return;
                }
                
                const newParentPath = selectionNum === 0 ? null : possibleParents[selectionNum - 1].path;
                
                const confirmed = confirm(
                    `Move "${category.name}" to ${newParentPath || 'Root'}?\n\n` +
                    `This will update all Miis using this category and its descendants.`
                );
                
                if (!confirmed) return;
                
                try {
                    const response = await fetch('/moveCategory', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ categoryPath, newParentPath })
                    });
                    
                    const data = await response.json();
                    
                    if (data.okay) {
                        alert(`Category moved successfully!\n${data.updatedMiis} Miis were updated.`);
                        if (newParentPath) expandedNodes.add(newParentPath);
                        await loadCategories();
                    } else {
                        alert('Error: ' + (data.error || 'Failed to move category'));
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Error moving category');
                }
            }

            async function deleteCategory(path) {
                const category = findCategoryByPath(path, categories);
                if (!category) return;
                
                const childCount = category.children ? category.children.length : 0;
                const hasChildren = childCount > 0;
                
                const message = hasChildren
                    ? `Delete "${category.name}" and ALL ${childCount} of its descendants?\n\n` +
                      `This will remove all these categories from all Miis.\n\n` +
                      `THIS CANNOT BE UNDONE!`
                    : `Delete "${category.name}"?\n\n` +
                      `This will remove it from all Miis.\n\n` +
                      `THIS CANNOT BE UNDONE!`;
                
                const confirmed = confirm(message);
                if (!confirmed) return;
                
                if (hasChildren) {
                    const doubleConfirm = confirm(`Are you ABSOLUTELY sure? This will delete ${childCount + 1} categories total.`);
                    if (!doubleConfirm) return;
                }
                
                try {
                    const response = await fetch('/deleteCategory', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ path })
                    });
                    
                    const data = await response.json();
                    
                    if (data.okay) {
                        alert(`Category deleted successfully!\n${data.updatedMiis} Miis were updated.`);
                        await loadCategories();
                    } else {
                        alert('Error: ' + (data.error || 'Failed to delete category'));
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Error deleting category');
                }
            }

            function findCategoryByPath(path, nodes) {
                for (const node of nodes) {
                    if (node.path === path) return node;
                    if (node.children && node.children.length > 0) {
                        const found = findCategoryByPath(path, node.children);
                        if (found) return found;
                    }
                }
                return null;
            }

            // Load categories on page load
            loadCategories();
        </script>
    </body>
</html>